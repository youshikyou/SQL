======================================
Between AND
边界值注意 比如Between 2014-01-01 AND 2016-12-31,这里面是从2014-01-01的0：00：00到2016-12-31的0:00:00，
所以2016-12-31产生的数据不被记录
=========================================

Null
Notice that NULLs are different than a zero - they are cells where data does not exist.
When identifying NULLs in a WHERE clause, we write IS NULL or IS NOT NULL. 
We don't use =, because NULL isn't considered a value in SQL. Rather, it is a property of the data.

NULLs - Expert Tip
There are two common ways in which you are likely to encounter NULLs:

- NULLs frequently occur when performing a LEFT or RIGHT JOIN. 
  You saw in the last lesson - when some rows in the left table of a left join are not matched with rows in the right table, 
  those rows will contain some NULL values in the result set.

- NULLs can also occur from simply missing data in our database.

===============================================================================================================
COUNT
Notice that COUNT does not consider rows that have NULL values. 
Therefore, this can be useful for quickly identifying which rows have missing data. 
You will learn GROUP BY in an upcoming concept, and then each of these aggregators will become much more useful.

========================================================================================================
SUM
Unlike COUNT, you can only use SUM on numeric columns.
However, SUM will ignore NULL values, as do the other aggregation functions you will see in the upcoming lessons.

Aggregation Reminder
An important thing to remember: aggregators only aggregate vertically - the values of a column. 
If you want to perform a calculation across rows, you would do this with simple arithmetic.

We saw this in the first lesson if you need a refresher, 
but the quiz in the next concept should assure you still remember how to aggregate across rows.

=======================================================================================================
MAX and MIN
Notice that MIN and MAX are aggregators that again ignore NULL values.
Check the expert tip below for a cool trick with MAX & MIN.

Expert Tip
Functionally, MIN and MAX are similar to COUNT in that they can be used on non-numerical columns. 
Depending on the column type, MIN will return the lowest number, earliest date, or non-numerical value as early 
in the alphabet as possible. As you might suspect, MAX does the opposite—it returns the highest number, 
the latest date, or the non-numerical value closest alphabetically to “Z.”

=======================================================================================================
Similar to other software AVG returns the mean of the data - 
that is the sum of all of the values in the column divided by the number of values in a column.
This aggregate function again ignores the NULL values in both the numerator and the denominator.

If you want to count NULLs as zero, you will need to use SUM and COUNT. However, this is probably not a good idea 
if the NULL values truly just represent unknown values for a cell.

MEDIAN - Expert Tip
One quick note that a median might be a more appropriate measure of center for this data, 
but finding the median happens to be a pretty difficult thing to get using SQL alone —
so difficult that finding a median is occasionally asked as an interview question.

One method to find the median is to get the median index and subset of the total set into the first half and query the subset 
DESC and LIMIT 1 to get the median.


==================================================================================
GROUP BY 
can be used to aggregate data within subsets of the data. 
For example, grouping for different accounts, different regions, or different sales representatives.
Any column in the SELECT statement that is not within an aggregator must be in the GROUP BY clause.

The GROUP BY always goes between WHERE and ORDER BY.
ORDER BY works like SORT in spreadsheet software.

GROUP BY - Expert Tip
Before we dive deeper into aggregations using GROUP BY statements, 
it is worth noting that SQL evaluates the aggregations before the LIMIT clause. 
If you don’t group by any columns, you’ll get a 1-row result—no problem there. 
If you group by a column with enough unique values that it exceeds the LIMIT number, 
the aggregates will be calculated, and then some rows will simply be omitted from the results.
This is actually a nice way to do things because you know you’re going to get the correct aggregates. 
If SQL cuts the table down to 100 rows, then performed the aggregations, your results would be substantially different.
The above query’s results exceed 100 rows, so it’s a perfect example. 
In the next concept, use the SQL environment to try removing the LIMIT and running it again to see what changes.

Key takeaways:

You can GROUP BY multiple columns at once, as we showed here. 
This is often useful to aggregate across a number of different segments.

The order of columns listed in the ORDER BY clause does make a difference. You are ordering the columns from left to right.
GROUP BY - Expert Tips
The order of column names in your GROUP BY clause doesn’t matter—the results will be the same regardless.
If we run the same query and reverse the order in the GROUP BY clause, you can see we get the same results.

As with ORDER BY, you can substitute numbers for column names in the GROUP BY clause. 
It’s generally recommended to do this only when you’re grouping many columns,
or if something else is causing the text in the GROUP BY clause to be excessively long.
A reminder here that any column that is not within an aggregation must show up in your GROUP BY statement. 
If you forget, you will likely get an error. 
However, in the off chance that your query does work, you might not like the results!

=================================================================
DISTINCT
DISTINCT is always used in SELECT statements, 
and it provides the unique rows for all columns written in the SELECT statement. 
Therefore, you only use DISTINCT once in any particular SELECT statement.

You could write:

SELECT DISTINCT column1, column2, column3
FROM table1;
which would return the unique (or DISTINCT) rows across all three columns.

You would NOT write:

SELECT DISTINCT column1, DISTINCT column2, DISTINCT column3
FROM table1;
You can think of DISTINCT the same way you might think of the statement "unique".

DISTINCT - Expert Tip
It’s worth noting that using DISTINCT, particularly in aggregations, can slow your queries down quite a bit.

=============================================================================
Having
HAVING is the “clean” way to filter a query that has been aggregated, but this is also commonly done using a subquery.
Essentially, any time you want to perform a WHERE on an element of your query that was created by an aggregate, 
you need to use HAVING instead.
==========================================================================
Date
The first function you are introduced to in working with dates is DATE_TRUNC.

DATE_TRUNC allows you to truncate your date to a particular part of your date-time column. 
Common trunctions are day, month, and year. Here is a great blog post by Mode Analytics on the power of this function.

DATE_PART can be useful for pulling a specific portion of a date, 
but notice pulling month or day of the week (dow) means that you are no longer keeping the years in order.
Rather you are grouping for certain components regardless of which year they belonged in.

For additional functions you can use with dates, check out the documentation here, 
but the DATE_TRUNC and DATE_PART functions definitely give you a great start!

You can reference the columns in your select statement in GROUP BY and ORDER BY clauses with numbers 
that follow the order they appear in the select statement. For example

SELECT standard_qty, COUNT(*)
FROM orders
GROUP BY 1 (this 1 refers to standard_qty since it is the first of the columns included in the select statement)
ORDER BY 1 (this 1 refers to standard_qty since it is the first of the columns included in the select statement)

=====================================================================
CASE 
The CASE statement always goes in the SELECT clause.

CASE must include the following components: WHEN, THEN, and END. 
ELSE is an optional component to catch cases that didn’t meet any of the other previous CASE conditions.

You can make any conditional statement using any conditional operator (like WHERE) between WHEN and THEN. 
This includes stringing together multiple conditional statements using AND and OR.
You can include multiple WHEN statements, as well as an ELSE statement again, to deal with any unaddressed conditions.





