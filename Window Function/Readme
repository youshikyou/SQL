A window function performs a calculation across a set of table rows that are somehow related to the current row. 
This is comparable to the type of calculation that can be done with an aggregate function. 
But unlike regular aggregate functions, use of a window function does not cause rows to become grouped into a single output row — 
the rows retain their separate identities. Behind the scenes, the window function is able to access more than just the current row of 
the query result.

Through introducing window functions, we have also introduced two statements that you may not be familiar with: OVER and PARTITION BY. 
These are key to window functions. Not every window function uses PARTITION BY; 
we can also use ORDER BY or no statement at all depending on the query we want to run. You will practice using these clauses 
in the upcoming quizzes. If you want more details right now, https://blog.sqlauthority.com/2015/11/04/sql-server-what-is-the-over-clause-notes-from-the-field-101/ from Pinal Dave is helpful.

Note: You can’t use window functions and standard aggregations in the same query. 
More specifically, you can’t include window functions in a GROUP BY clause.

SELECT standard_amt_usd,
DATE_TRUNC('year',occurred_at) order_year,
SUM(standard_amt_usd) OVER(PARTITION BY DATE_TRUNC('year',occurred_at) ORDER BY occurred_at) running_total
FROM order

Above is first to partition the table according to year, then order each partitioned subtable according to the occurred time.
SUM the standard_amt_usd according to occurred time within each partitioned subtable.

===============================
ROW_NUMBER()
RANK()
DENSE_RANK()

Above return the rank. There is difference between row_number() and rank().
row_number() return different number if the ordered text has the same value.
For example you order the rows by month,but there are two rows has the same month.
row_number() returns 1 and 2 respectively to mark them differently.
rank() , it returns 1 and 1 to make them same but for the coming month , the row will be 3.
You can change this to use DENSE_rank(), then the row in the coming month will be 2. 
====================================
The easiest way to think about this - leaving the ORDER BY out is equivalent to "ordering" in a way 
that all rows in the partition are "equal" to each other. Indeed, you can get the same effect by explicitly
adding the ORDER BY clause like this: ORDER BY 0 (or "order by" any constant expression), or even, more emphatically, ORDER BY NULL.

============================================
You can use window functions to identify what percentile (or quartile, or any other subdivision) a given row falls into. 
The syntax is NTILE(*# of buckets*). 
In this case, ORDER BY determines which column to use to determine the quartiles (or whatever number of ‘tiles you specify).

Expert Tip
In cases with relatively few rows in a window, the NTILE function doesn’t calculate exactly as you might expect.
For example, If you only had two records and you were measuring percentiles, you’d expect one record to define the 1st percentile,
and the other record to define the 100th percentile. Using the NTILE function, 
what you’d actually see is one record in the 1st percentile, and one in the 2nd percentile.

In other words, when you use a NTILE function but the number of rows in the partition is less than the NTILE(number of groups), 
then NTILE will divide the rows into as many groups as there are members (rows) in the set 
but then stop short of the requested number of groups. If you’re working with very small windows, keep this in mind and consider 
using quartiles or similarly small bands.

You can check out a complete list of window functions in Postgres (the syntax Mode uses) in the Postgres documentation.












