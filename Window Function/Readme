A window function performs a calculation across a set of table rows that are somehow related to the current row. 
This is comparable to the type of calculation that can be done with an aggregate function. 
But unlike regular aggregate functions, use of a window function does not cause rows to become grouped into a single output row — 
the rows retain their separate identities. Behind the scenes, the window function is able to access more than just the current row of 
the query result.

Through introducing window functions, we have also introduced two statements that you may not be familiar with: OVER and PARTITION BY. 
These are key to window functions. Not every window function uses PARTITION BY; 
we can also use ORDER BY or no statement at all depending on the query we want to run. You will practice using these clauses 
in the upcoming quizzes. If you want more details right now, https://blog.sqlauthority.com/2015/11/04/sql-server-what-is-the-over-clause-notes-from-the-field-101/ from Pinal Dave is helpful.

Note: You can’t use window functions and standard aggregations in the same query. 
More specifically, you can’t include window functions in a GROUP BY clause.

SELECT standard_amt_usd,
DATE_TRUNC('year',occurred_at) order_year,
SUM(standard_amt_usd) OVER(PARTITION BY DATE_TRUNC('year',occurred_at) ORDER BY occurred_at) running_total
FROM order

Above is first to partition the table according to year, then order each partitioned subtable according to the occurred time.
SUM the standard_amt_usd according to occurred time within each partitioned subtable.
